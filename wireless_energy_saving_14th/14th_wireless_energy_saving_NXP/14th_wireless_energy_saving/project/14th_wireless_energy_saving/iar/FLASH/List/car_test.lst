###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       08/Jul/2019  02:42:56
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\app\debug\src\car_test.c
#    Command line =  
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\app\debug\src\car_test.c
#        -D LPLD_K60 -lCN
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\FLASH\List
#        -lB
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\FLASH\List
#        -o
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\CPU\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\common\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\LPLD\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\LPLD\HW\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\FatFs\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\FatFs\option\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\USB\common\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\USB\driver\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\USB\descriptor\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\USB\class\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\control\inc\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\debug\inc\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\device\inc\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\signal\inc\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\system\inc\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\control\src\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\debug\src\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\device\src\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\signal\src\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\system\src\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\drivers\inc\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\drivers\src\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\charge\inc\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\charge\src\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\LPLD\FUNC\
#        -Ol -I "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    Locale       =  Chinese (Simplified)_China.936
#    List file    =  
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\FLASH\List\car_test.lst
#    Object file  =  
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\FLASH\Obj\car_test.o
#
###############################################################################

D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\app\debug\src\car_test.c
      1          /*=============================================
      2              @file         car_test.c
      3              @brief        小车各个硬件模块测试头文件，下位机调试界面 
      4                            舵机、电机、拨码、LED、编码器
      5                            使用前会关闭1ms PIT中断 不关红外
      6              @programmer   Beyond Hsueh
      7          =============================================*/
      8          
      9          #include "car_test.h"
     10          
     11          /*===============================================================
     12                  @note      李白前时原有月，惟有李白诗能说。
     13                             李白如今已仙去，月在青天几圆缺?
     14                             今人犹歌李白诗，明月还如李白时。
     15                             我学李白对明月，白与明月安能知!
     16                             李白能诗复能酒，我今百杯复千首；
     17                             我愧虽无李白才，料应月不嫌我丑。
     18                             我也不登天子船，我也不上长安眠；
     19                             姑苏城外一茅屋，万树桃花月满天。
     20          ==================================================================*/
     21          

   \                                 In section .bss, align 1
     22          static uint8 suc_exit_test_flag = FLAG_OFF;
   \                     suc_exit_test_flag:
   \   00000000                      DS8 1
     23          
     24          /*===============================================================
     25          	@brief      拨码测试
     26          	@function   将拨码值显示在oled上   
     27          	@parameter  拨码测试所属的页数
     28          	@return     根据按键左右返回需要进入的下一页页数
     29          ==================================================================*/

   \                                 In section .text, align 2, keep-with-next
     30          uint8 switch_test(uint8 page_num)
     31          {
   \                     switch_test: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
     32              int8  exit_flag = 0;
   \   00000004   0x2500             MOVS     R5,#+0
     33              uint8 button_value = 0;
   \   00000006   0x2600             MOVS     R6,#+0
     34              uint16 infrared_value = 0;
   \   00000008   0x2700             MOVS     R7,#+0
     35              
     36              //显示信息
     37              oled_fill(0x00);
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x.... 0x....      BL       oled_fill
   \   00000010   0xE7FF             B.N      ??switch_test_0
     38          
     39              while(!exit_flag)
     40              {
     41                  Switch_Test();
     42          
     43                  //读取按键值
     44          	button_value=button_scan();
     45          	
     46                  infrared_value = get_infrared_command();
     47                  reset_infrared();
     48                  
     49                  switch(infrared_value)
     50                  {
     51                      case COMMAND_UP:
     52                          button_value = FIVE_DIR_UP;
     53                          break;
     54                      case COMMAND_DOWN:
     55                          button_value = FIVE_DIR_DOWN;
     56                          break;                    
     57                      case COMMAND_LEFT:
     58                          button_value = FIVE_DIR_LEFT;
     59                          break;                    
     60                      case COMMAND_RIGHT:
     61                          button_value = FIVE_DIR_RIGHT;
     62                          break;
     63                      case COMMAND_OK:
     64                          button_value = FIVE_DIR_OK;
     65                          break;     
     66                      default:
     67                          break;                                    
     68                  }
     69          
     70                  switch(button_value)
     71                  {
     72                  case BT_UP_PRESS:
     73                      break;
   \                     ??switch_test_1: (+1)
   \                     ??switch_test_0: (+1)
   \   00000012   0xB26D             SXTB     R5,R5            ;; SignExt  R5,R5,#+24,#+24
   \   00000014   0x2D00             CMP      R5,#+0
   \   00000016   0xD13D             BNE.N    ??switch_test_2
   \   00000018   0x.... 0x....      BL       Switch_Test
   \   0000001C   0x.... 0x....      BL       button_scan
   \   00000020   0x0006             MOVS     R6,R0
   \   00000022   0x.... 0x....      BL       get_infrared_command
   \   00000026   0x0007             MOVS     R7,R0
   \   00000028   0x.... 0x....      BL       reset_infrared
   \   0000002C   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000002E   0x2F84             CMP      R7,#+132
   \   00000030   0xD00C             BEQ.N    ??switch_test_3
   \   00000032   0x2F8C             CMP      R7,#+140
   \   00000034   0xD006             BEQ.N    ??switch_test_4
   \   00000036   0x2F8E             CMP      R7,#+142
   \   00000038   0xD00C             BEQ.N    ??switch_test_5
   \   0000003A   0x2FA9             CMP      R7,#+169
   \   0000003C   0xD004             BEQ.N    ??switch_test_6
   \   0000003E   0x2FAD             CMP      R7,#+173
   \   00000040   0xD006             BEQ.N    ??switch_test_7
   \   00000042   0xE009             B.N      ??switch_test_8
   \                     ??switch_test_4: (+1)
   \   00000044   0x2601             MOVS     R6,#+1
   \   00000046   0xE007             B.N      ??switch_test_9
   \                     ??switch_test_6: (+1)
   \   00000048   0x2602             MOVS     R6,#+2
   \   0000004A   0xE005             B.N      ??switch_test_9
   \                     ??switch_test_3: (+1)
   \   0000004C   0x2603             MOVS     R6,#+3
   \   0000004E   0xE003             B.N      ??switch_test_9
   \                     ??switch_test_7: (+1)
   \   00000050   0x2604             MOVS     R6,#+4
   \   00000052   0xE001             B.N      ??switch_test_9
   \                     ??switch_test_5: (+1)
   \   00000054   0x2605             MOVS     R6,#+5
   \   00000056   0xE7FF             B.N      ??switch_test_9
   \                     ??switch_test_8: (+1)
   \                     ??switch_test_9: (+1)
   \   00000058   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000005A   0x2E01             CMP      R6,#+1
   \   0000005C   0xD0D9             BEQ.N    ??switch_test_1
   \   0000005E   0xD318             BCC.N    ??switch_test_10
   \   00000060   0x2E03             CMP      R6,#+3
   \   00000062   0xD005             BEQ.N    ??switch_test_11
   \   00000064   0xD303             BCC.N    ??switch_test_12
   \   00000066   0x2E05             CMP      R6,#+5
   \   00000068   0xD012             BEQ.N    ??switch_test_13
   \   0000006A   0xD309             BCC.N    ??switch_test_14
   \   0000006C   0xE011             B.N      ??switch_test_10
     74                  case BT_DN_PRESS:
     75                      break;
   \                     ??switch_test_12: (+1)
   \   0000006E   0xE7D0             B.N      ??switch_test_0
     76                      //左键按下向前翻页
     77                  case BT_LE_PRESS:
     78                  {
     79                      if(page_num > TEST_PAGE_MIN)
   \                     ??switch_test_11: (+1)
   \   00000070   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000072   0x2C02             CMP      R4,#+2
   \   00000074   0xDB01             BLT.N    ??switch_test_15
     80                      {
     81                          page_num--;
   \   00000076   0x1E64             SUBS     R4,R4,#+1
   \   00000078   0xE000             B.N      ??switch_test_16
     82                      }
     83                      else//当前页是最前一页，左键按下则翻至最后一页
     84                      {
     85                          page_num = TEST_PAGE_MAX;
   \                     ??switch_test_15: (+1)
   \   0000007A   0x2403             MOVS     R4,#+3
     86                      }
     87                      //退出标志位置位
     88                      exit_flag = 1;
   \                     ??switch_test_16: (+1)
   \   0000007C   0x2501             MOVS     R5,#+1
     89                  }
     90                  break;
   \   0000007E   0xE7C8             B.N      ??switch_test_0
     91                  //右键按下向后翻页
     92                  case BT_RI_PRESS:
     93                  {
     94                      if(page_num < TEST_PAGE_MAX)
   \                     ??switch_test_14: (+1)
   \   00000080   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000082   0x2C03             CMP      R4,#+3
   \   00000084   0xDA01             BGE.N    ??switch_test_17
     95                      {
     96                          page_num++;
   \   00000086   0x1C64             ADDS     R4,R4,#+1
   \   00000088   0xE000             B.N      ??switch_test_18
     97                      }
     98                      //当前页是最后一页，则翻至最前一页
     99                      else
    100                      {
    101                          page_num = TEST_PAGE_MIN;
   \                     ??switch_test_17: (+1)
   \   0000008A   0x2401             MOVS     R4,#+1
    102                      }
    103                      //退出标志位置位
    104                      exit_flag = 1;
   \                     ??switch_test_18: (+1)
   \   0000008C   0x2501             MOVS     R5,#+1
    105                  }
    106                  break;
   \   0000008E   0xE7C0             B.N      ??switch_test_0
    107                  case BT_OK_PRESS:
    108                      break;
   \                     ??switch_test_13: (+1)
   \   00000090   0xE7BF             B.N      ??switch_test_0
    109                  default:
    110                      break;
   \                     ??switch_test_10: (+1)
   \   00000092   0xE7BE             B.N      ??switch_test_0
    111                  }
    112              }
    113              return page_num;
   \                     ??switch_test_2: (+1)
   \   00000094   0x0020             MOVS     R0,R4
   \   00000096   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000098   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    114          }
    115          
    116          /*===============================================================
    117          	@brief      led灯测试
    118          	@function   根据拨码值亮灯   
    119          	@parameter  led测试所属的页数
    120          	@return     根据按键左右返回需要进入的下一页页数
    121          ==================================================================*/

   \                                 In section .text, align 2, keep-with-next
    122          uint8 led_test(uint8 page_num)
    123          {
   \                     led_test: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
    124              uint8 button_value = 0;
   \   00000004   0x2500             MOVS     R5,#+0
    125              uint8 exit_flag = 0;
   \   00000006   0x2600             MOVS     R6,#+0
    126              uint16 infrared_value = 0;
   \   00000008   0x2700             MOVS     R7,#+0
    127          
    128              //显示信息
    129              oled_fill(0x00);
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x.... 0x....      BL       oled_fill
   \   00000010   0xE7FF             B.N      ??led_test_0
    130          
    131              while(!exit_flag)
    132              {
    133                   LED_Test();
    134          
    135                  //读取按键值
    136                  button_value=button_scan();
    137                  
    138                  infrared_value = get_infrared_command();
    139                  reset_infrared();
    140                  
    141                  switch(infrared_value)
    142                  {
    143                      case COMMAND_UP:
    144                          button_value = FIVE_DIR_UP;
    145                          break;
    146                      case COMMAND_DOWN:
    147                          button_value = FIVE_DIR_DOWN;
    148                          break;                    
    149                      case COMMAND_LEFT:
    150                          button_value = FIVE_DIR_LEFT;
    151                          break;                    
    152                      case COMMAND_RIGHT:
    153                          button_value = FIVE_DIR_RIGHT;
    154                          break;
    155                      case COMMAND_OK:
    156                          button_value = FIVE_DIR_OK;
    157                          break;     
    158                      default:
    159                          break;                                    
    160                  }
    161          
    162                  switch(button_value)
    163                  {
    164                  case BT_UP_PRESS:
    165                      break;
   \                     ??led_test_1: (+1)
   \                     ??led_test_0: (+1)
   \   00000012   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000014   0x2E00             CMP      R6,#+0
   \   00000016   0xD13D             BNE.N    ??led_test_2
   \   00000018   0x.... 0x....      BL       LED_Test
   \   0000001C   0x.... 0x....      BL       button_scan
   \   00000020   0x0005             MOVS     R5,R0
   \   00000022   0x.... 0x....      BL       get_infrared_command
   \   00000026   0x0007             MOVS     R7,R0
   \   00000028   0x.... 0x....      BL       reset_infrared
   \   0000002C   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000002E   0x2F84             CMP      R7,#+132
   \   00000030   0xD00C             BEQ.N    ??led_test_3
   \   00000032   0x2F8C             CMP      R7,#+140
   \   00000034   0xD006             BEQ.N    ??led_test_4
   \   00000036   0x2F8E             CMP      R7,#+142
   \   00000038   0xD00C             BEQ.N    ??led_test_5
   \   0000003A   0x2FA9             CMP      R7,#+169
   \   0000003C   0xD004             BEQ.N    ??led_test_6
   \   0000003E   0x2FAD             CMP      R7,#+173
   \   00000040   0xD006             BEQ.N    ??led_test_7
   \   00000042   0xE009             B.N      ??led_test_8
   \                     ??led_test_4: (+1)
   \   00000044   0x2501             MOVS     R5,#+1
   \   00000046   0xE007             B.N      ??led_test_9
   \                     ??led_test_6: (+1)
   \   00000048   0x2502             MOVS     R5,#+2
   \   0000004A   0xE005             B.N      ??led_test_9
   \                     ??led_test_3: (+1)
   \   0000004C   0x2503             MOVS     R5,#+3
   \   0000004E   0xE003             B.N      ??led_test_9
   \                     ??led_test_7: (+1)
   \   00000050   0x2504             MOVS     R5,#+4
   \   00000052   0xE001             B.N      ??led_test_9
   \                     ??led_test_5: (+1)
   \   00000054   0x2505             MOVS     R5,#+5
   \   00000056   0xE7FF             B.N      ??led_test_9
   \                     ??led_test_8: (+1)
   \                     ??led_test_9: (+1)
   \   00000058   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000005A   0x2D01             CMP      R5,#+1
   \   0000005C   0xD0D9             BEQ.N    ??led_test_1
   \   0000005E   0xD318             BCC.N    ??led_test_10
   \   00000060   0x2D03             CMP      R5,#+3
   \   00000062   0xD005             BEQ.N    ??led_test_11
   \   00000064   0xD303             BCC.N    ??led_test_12
   \   00000066   0x2D05             CMP      R5,#+5
   \   00000068   0xD012             BEQ.N    ??led_test_13
   \   0000006A   0xD309             BCC.N    ??led_test_14
   \   0000006C   0xE011             B.N      ??led_test_10
    166                  case BT_DN_PRESS:
    167                      break;
   \                     ??led_test_12: (+1)
   \   0000006E   0xE7D0             B.N      ??led_test_0
    168                      //左键按下向前翻页
    169                  case BT_LE_PRESS:
    170                      if(page_num > TEST_PAGE_MIN)
   \                     ??led_test_11: (+1)
   \   00000070   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000072   0x2C02             CMP      R4,#+2
   \   00000074   0xDB01             BLT.N    ??led_test_15
    171                      {
    172                          page_num--;
   \   00000076   0x1E64             SUBS     R4,R4,#+1
   \   00000078   0xE000             B.N      ??led_test_16
    173                      }
    174                      //当前页是最前一页，左键按下则翻至最后一页
    175                      else
    176                      {
    177                          page_num = TEST_PAGE_MAX;
   \                     ??led_test_15: (+1)
   \   0000007A   0x2403             MOVS     R4,#+3
    178                      }
    179                      //退出标志位置位
    180                      exit_flag = 1;
   \                     ??led_test_16: (+1)
   \   0000007C   0x2601             MOVS     R6,#+1
    181                      break;
   \   0000007E   0xE7C8             B.N      ??led_test_0
    182                      //右键按下向后翻页
    183                  case BT_RI_PRESS:
    184                      if(page_num < TEST_PAGE_MAX)
   \                     ??led_test_14: (+1)
   \   00000080   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000082   0x2C03             CMP      R4,#+3
   \   00000084   0xDA01             BGE.N    ??led_test_17
    185                      {
    186                          page_num++;
   \   00000086   0x1C64             ADDS     R4,R4,#+1
   \   00000088   0xE000             B.N      ??led_test_18
    187                      }
    188                      //如果当前页是最后一页，翻至最前一页
    189                      else
    190                      {
    191                          page_num = TEST_PAGE_MIN;
   \                     ??led_test_17: (+1)
   \   0000008A   0x2401             MOVS     R4,#+1
    192                      }
    193                      //退出标志位置位
    194                      exit_flag = 1;
   \                     ??led_test_18: (+1)
   \   0000008C   0x2601             MOVS     R6,#+1
    195                      break;
   \   0000008E   0xE7C0             B.N      ??led_test_0
    196                  case BT_OK_PRESS:
    197                      break;
   \                     ??led_test_13: (+1)
   \   00000090   0xE7BF             B.N      ??led_test_0
    198          
    199                  default:
    200                      break;
   \                     ??led_test_10: (+1)
   \   00000092   0xE7BE             B.N      ??led_test_0
    201          
    202                  }
    203              }
    204          
    205              return page_num;
   \                     ??led_test_2: (+1)
   \   00000094   0x0020             MOVS     R0,R4
   \   00000096   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000098   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    206          }
    207          
    208          /*===============================================================
    209          	@brief      红外测试
    210          	@function   显示红外解码值   
    211          	@parameter  红外测试所属的页数
    212          	@return     根据按键左右返回需要进入的下一页页数
    213          ==================================================================*/

   \                                 In section .text, align 2, keep-with-next
    214          uint8 infrared_test(uint8 page_num)// 此处红外不能翻页
    215          {
   \                     infrared_test: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    216              int8  exit_flag = 0;
   \   00000004   0x2500             MOVS     R5,#+0
    217              uint8 button_value = 0;
   \   00000006   0x2000             MOVS     R0,#+0
    218              
    219              //显示信息
    220              oled_fill(0x00);
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      BL       oled_fill
    221              oled_display_6x8str(20,0,"infrared test");
   \   0000000E   0x....             LDR.N    R2,??DataTable3
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x2014             MOVS     R0,#+20
   \   00000014   0x.... 0x....      BL       oled_display_6x8str
   \   00000018   0xE7FF             B.N      ??infrared_test_0
    222          
    223              while(!exit_flag)
    224              {
    225                  oled_print_short(2, 1, get_infrared_command() );
    226          
    227                  //读取按键值
    228                  button_value=button_scan();
    229          
    230                  switch(button_value)
    231                  {
    232                  case BT_UP_PRESS:
    233                      break;
   \                     ??infrared_test_1: (+1)
   \                     ??infrared_test_0: (+1)
   \   0000001A   0xB26D             SXTB     R5,R5            ;; SignExt  R5,R5,#+24,#+24
   \   0000001C   0x2D00             CMP      R5,#+0
   \   0000001E   0xD128             BNE.N    ??infrared_test_2
   \   00000020   0x.... 0x....      BL       get_infrared_command
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x0002             MOVS     R2,R0
   \   00000028   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   0000002A   0x2101             MOVS     R1,#+1
   \   0000002C   0x2002             MOVS     R0,#+2
   \   0000002E   0x.... 0x....      BL       oled_print_short
   \   00000032   0x.... 0x....      BL       button_scan
   \   00000036   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000038   0x2801             CMP      R0,#+1
   \   0000003A   0xD0EE             BEQ.N    ??infrared_test_1
   \   0000003C   0xD318             BCC.N    ??infrared_test_3
   \   0000003E   0x2803             CMP      R0,#+3
   \   00000040   0xD005             BEQ.N    ??infrared_test_4
   \   00000042   0xD303             BCC.N    ??infrared_test_5
   \   00000044   0x2805             CMP      R0,#+5
   \   00000046   0xD012             BEQ.N    ??infrared_test_6
   \   00000048   0xD309             BCC.N    ??infrared_test_7
   \   0000004A   0xE011             B.N      ??infrared_test_3
    234                  case BT_DN_PRESS:
    235                      break;
   \                     ??infrared_test_5: (+1)
   \   0000004C   0xE7E5             B.N      ??infrared_test_0
    236                      //左键按下向前翻页
    237                  case BT_LE_PRESS:
    238                  {
    239                      if(page_num > TEST_PAGE_MIN)
   \                     ??infrared_test_4: (+1)
   \   0000004E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000050   0x2C02             CMP      R4,#+2
   \   00000052   0xDB01             BLT.N    ??infrared_test_8
    240                      {
    241                          page_num--;
   \   00000054   0x1E64             SUBS     R4,R4,#+1
   \   00000056   0xE000             B.N      ??infrared_test_9
    242                      }
    243                      else//当前页是最前一页，左键按下则翻至最后一页
    244                      {
    245                          page_num = TEST_PAGE_MAX;
   \                     ??infrared_test_8: (+1)
   \   00000058   0x2403             MOVS     R4,#+3
    246                      }
    247                      //退出标志位置位
    248                      exit_flag = 1;
   \                     ??infrared_test_9: (+1)
   \   0000005A   0x2501             MOVS     R5,#+1
    249                  }
    250                  break;
   \   0000005C   0xE7DD             B.N      ??infrared_test_0
    251                  //右键按下向后翻页
    252                  case BT_RI_PRESS:
    253                  {
    254                      if(page_num < TEST_PAGE_MAX)
   \                     ??infrared_test_7: (+1)
   \   0000005E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000060   0x2C03             CMP      R4,#+3
   \   00000062   0xDA01             BGE.N    ??infrared_test_10
    255                      {
    256                          page_num++;
   \   00000064   0x1C64             ADDS     R4,R4,#+1
   \   00000066   0xE000             B.N      ??infrared_test_11
    257                      }
    258                      //当前页是最后一页，则翻至最前一页
    259                      else
    260                      {
    261                          page_num = TEST_PAGE_MIN;
   \                     ??infrared_test_10: (+1)
   \   00000068   0x2401             MOVS     R4,#+1
    262                      }
    263                      //退出标志位置位
    264                      exit_flag = 1;
   \                     ??infrared_test_11: (+1)
   \   0000006A   0x2501             MOVS     R5,#+1
    265                  }
    266                  break;
   \   0000006C   0xE7D5             B.N      ??infrared_test_0
    267                  case BT_OK_PRESS:
    268                      break;
   \                     ??infrared_test_6: (+1)
   \   0000006E   0xE7D4             B.N      ??infrared_test_0
    269                  default:
    270                      break;
   \                     ??infrared_test_3: (+1)
   \   00000070   0xE7D3             B.N      ??infrared_test_0
    271                  }
    272              }
    273              return page_num;
   \                     ??infrared_test_2: (+1)
   \   00000072   0x0020             MOVS     R0,R4
   \   00000074   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000076   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    274          }
    275          
    276          /*===============================================================
    277          	@brief      编码器测试函数
    278          	@function   按下确认键则测试程序   
    279          	@parameter  退出测试所属的页数
    280          	@return     根据按键左右返回需要进入的下一页页数
    281          ==================================================================*/

   \                                 In section .text, align 2, keep-with-next
    282          uint8 encoder_test(uint8 page_num)
    283          {        
   \                     encoder_test: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
    284          	uint8 button_value = 0;
   \   00000006   0x2700             MOVS     R7,#+0
    285                  int8 exit_flag = 0;
   \   00000008   0x2500             MOVS     R5,#+0
    286                  int16 infrared_value = 0;
   \   0000000A   0xF05F 0x0800      MOVS     R8,#+0
    287                  static uint8 suc_count_flag;
    288                  int16 pwm_set = 2000;
   \   0000000E   0xF44F 0x66FA      MOV      R6,#+2000
    289                  
    290                  static int32 sl_time_count;
    291                  static int32 sl_time_count_last;
    292          	//显示信息
    293          	oled_fill(0x00);
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x.... 0x....      BL       oled_fill
    294                  
    295          	oled_display_16x8str(60,0,"encoder");
   \   00000018   0x....             LDR.N    R2,??DataTable3_1
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x203C             MOVS     R0,#+60
   \   0000001E   0x.... 0x....      BL       oled_display_16x8str
   \   00000022   0xE7FF             B.N      ??encoder_test_0
    296                  
    297                  //PIT_ONE_Disable(PIT_1);
    298          	while(exit_flag == FLAG_OFF)
    299          	{
    300                  //读取按键值
    301                  button_value = button_scan();
    302                          
    303                  Encoder_Test();
    304          
    305                  infrared_value = get_infrared_command();
    306                  reset_infrared();
    307                  
    308                  switch(infrared_value)
    309                  {
    310                      case COMMAND_UP:
    311                          button_value = FIVE_DIR_UP;
    312                          pwm_set += 200;
    313                          break;
    314                      case COMMAND_DOWN:
    315                          button_value = FIVE_DIR_DOWN;
    316                          pwm_set -= 200;
    317                          break;                    
    318                      case COMMAND_LEFT:
    319                          button_value = FIVE_DIR_LEFT;
    320                          break;                    
    321                      case COMMAND_RIGHT:
    322                          button_value = FIVE_DIR_RIGHT;
    323                          break;
    324                      case COMMAND_OK:
    325                          button_value = FIVE_DIR_OK;
    326                          suc_count_flag = ON;
    327                          sl_time_count_last = gul_time_100us;
    328                          break;
    329                      case COMMAND_POWER:
    330                          suc_count_flag = OFF;
    331                          break;   
    332                      default:
    333                          break;                                    
    334                  }
    335                  
    336                  oled_print_short(0,0,suc_count_flag);
    337                  oled_print_short(60,6,sl_time_count/10000);
    338                  oled_print_short(60,7,pwm_set);
    339          
    340                  
    341                  if(suc_count_flag)
    342                  {
    343                      guc_car_run_flag = CAR_RUN;
    344                      sl_time_count = gul_time_100us - sl_time_count_last;
    345                  }
    346                  else
    347                  {
    348                      guc_car_run_flag = CAR_STOP;
    349                  }
    350                  
    351                  gl_pwm_output = pwm_set;
    352                  Motor_Output();
    353                  
    354                  switch(button_value)
    355                  {
    356                  case BT_UP_PRESS:
    357                      break;
   \                     ??encoder_test_1: (+1)
   \                     ??encoder_test_0: (+1)
   \   00000024   0xB26D             SXTB     R5,R5            ;; SignExt  R5,R5,#+24,#+24
   \   00000026   0x2D00             CMP      R5,#+0
   \   00000028   0xF040 0x8084      BNE.W    ??encoder_test_2
   \   0000002C   0x.... 0x....      BL       button_scan
   \   00000030   0x0007             MOVS     R7,R0
   \   00000032   0x.... 0x....      BL       Encoder_Test
   \   00000036   0x.... 0x....      BL       get_infrared_command
   \   0000003A   0x4680             MOV      R8,R0
   \   0000003C   0x.... 0x....      BL       reset_infrared
   \   00000040   0xFA0F 0xF888      SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
   \   00000044   0xF1B8 0x0F84      CMP      R8,#+132
   \   00000048   0xD015             BEQ.N    ??encoder_test_3
   \   0000004A   0xF1B8 0x0F8B      CMP      R8,#+139
   \   0000004E   0xD01F             BEQ.N    ??encoder_test_4
   \   00000050   0xF1B8 0x0F8C      CMP      R8,#+140
   \   00000054   0xD009             BEQ.N    ??encoder_test_5
   \   00000056   0xF1B8 0x0F8E      CMP      R8,#+142
   \   0000005A   0xD010             BEQ.N    ??encoder_test_6
   \   0000005C   0xF1B8 0x0FA9      CMP      R8,#+169
   \   00000060   0xD006             BEQ.N    ??encoder_test_7
   \   00000062   0xF1B8 0x0FAD      CMP      R8,#+173
   \   00000066   0xD008             BEQ.N    ??encoder_test_8
   \   00000068   0xE016             B.N      ??encoder_test_9
   \                     ??encoder_test_5: (+1)
   \   0000006A   0x2701             MOVS     R7,#+1
   \   0000006C   0x36C8             ADDS     R6,R6,#+200
   \   0000006E   0xE013             B.N      ??encoder_test_10
   \                     ??encoder_test_7: (+1)
   \   00000070   0x2702             MOVS     R7,#+2
   \   00000072   0x3EC8             SUBS     R6,R6,#+200
   \   00000074   0xE010             B.N      ??encoder_test_10
   \                     ??encoder_test_3: (+1)
   \   00000076   0x2703             MOVS     R7,#+3
   \   00000078   0xE00E             B.N      ??encoder_test_10
   \                     ??encoder_test_8: (+1)
   \   0000007A   0x2704             MOVS     R7,#+4
   \   0000007C   0xE00C             B.N      ??encoder_test_10
   \                     ??encoder_test_6: (+1)
   \   0000007E   0x2705             MOVS     R7,#+5
   \   00000080   0x2001             MOVS     R0,#+1
   \   00000082   0x....             LDR.N    R1,??DataTable3_2
   \   00000084   0x7008             STRB     R0,[R1, #+0]
   \   00000086   0x....             LDR.N    R0,??DataTable3_3
   \   00000088   0x6800             LDR      R0,[R0, #+0]
   \   0000008A   0x....             LDR.N    R1,??DataTable3_4
   \   0000008C   0x6008             STR      R0,[R1, #+0]
   \   0000008E   0xE003             B.N      ??encoder_test_10
   \                     ??encoder_test_4: (+1)
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0x....             LDR.N    R1,??DataTable3_2
   \   00000094   0x7008             STRB     R0,[R1, #+0]
   \   00000096   0xE7FF             B.N      ??encoder_test_10
   \                     ??encoder_test_9: (+1)
   \                     ??encoder_test_10: (+1)
   \   00000098   0x....             LDR.N    R0,??DataTable3_2
   \   0000009A   0x7800             LDRB     R0,[R0, #+0]
   \   0000009C   0x0002             MOVS     R2,R0
   \   0000009E   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   000000A0   0x2100             MOVS     R1,#+0
   \   000000A2   0x2000             MOVS     R0,#+0
   \   000000A4   0x.... 0x....      BL       oled_print_short
   \   000000A8   0x....             LDR.N    R0,??DataTable3_5
   \   000000AA   0x6800             LDR      R0,[R0, #+0]
   \   000000AC   0xF242 0x7110      MOVW     R1,#+10000
   \   000000B0   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   000000B4   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   000000B6   0x2106             MOVS     R1,#+6
   \   000000B8   0x203C             MOVS     R0,#+60
   \   000000BA   0x.... 0x....      BL       oled_print_short
   \   000000BE   0x0032             MOVS     R2,R6
   \   000000C0   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   000000C2   0x2107             MOVS     R1,#+7
   \   000000C4   0x203C             MOVS     R0,#+60
   \   000000C6   0x.... 0x....      BL       oled_print_short
   \   000000CA   0x....             LDR.N    R0,??DataTable3_2
   \   000000CC   0x7800             LDRB     R0,[R0, #+0]
   \   000000CE   0x2800             CMP      R0,#+0
   \   000000D0   0xD00A             BEQ.N    ??encoder_test_11
   \   000000D2   0x2001             MOVS     R0,#+1
   \   000000D4   0x....             LDR.N    R1,??DataTable3_6
   \   000000D6   0x7008             STRB     R0,[R1, #+0]
   \   000000D8   0x....             LDR.N    R0,??DataTable3_3
   \   000000DA   0x6800             LDR      R0,[R0, #+0]
   \   000000DC   0x....             LDR.N    R1,??DataTable3_4
   \   000000DE   0x6809             LDR      R1,[R1, #+0]
   \   000000E0   0x1A40             SUBS     R0,R0,R1
   \   000000E2   0x....             LDR.N    R1,??DataTable3_5
   \   000000E4   0x6008             STR      R0,[R1, #+0]
   \   000000E6   0xE002             B.N      ??encoder_test_12
   \                     ??encoder_test_11: (+1)
   \   000000E8   0x2000             MOVS     R0,#+0
   \   000000EA   0x....             LDR.N    R1,??DataTable3_6
   \   000000EC   0x7008             STRB     R0,[R1, #+0]
   \                     ??encoder_test_12: (+1)
   \   000000EE   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   000000F0   0x....             LDR.N    R0,??DataTable3_7
   \   000000F2   0x6006             STR      R6,[R0, #+0]
   \   000000F4   0x.... 0x....      BL       Motor_Output
   \   000000F8   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000FA   0x2F01             CMP      R7,#+1
   \   000000FC   0xD092             BEQ.N    ??encoder_test_1
   \   000000FE   0xD318             BCC.N    ??encoder_test_13
   \   00000100   0x2F03             CMP      R7,#+3
   \   00000102   0xD005             BEQ.N    ??encoder_test_14
   \   00000104   0xD303             BCC.N    ??encoder_test_15
   \   00000106   0x2F05             CMP      R7,#+5
   \   00000108   0xD012             BEQ.N    ??encoder_test_16
   \   0000010A   0xD309             BCC.N    ??encoder_test_17
   \   0000010C   0xE011             B.N      ??encoder_test_13
    358                  case BT_DN_PRESS:
    359                      break;
   \                     ??encoder_test_15: (+1)
   \   0000010E   0xE789             B.N      ??encoder_test_0
    360                      //左键按下向前翻页
    361                  case BT_LE_PRESS:
    362                      if(page_num > TEST_PAGE_MIN)
   \                     ??encoder_test_14: (+1)
   \   00000110   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000112   0x2C02             CMP      R4,#+2
   \   00000114   0xDB01             BLT.N    ??encoder_test_18
    363                      {
    364                          page_num--;
   \   00000116   0x1E64             SUBS     R4,R4,#+1
   \   00000118   0xE000             B.N      ??encoder_test_19
    365                      }
    366                      //当前页是最前一页，左键按下则翻至最后一页
    367                      else
    368                      {
    369                          page_num = TEST_PAGE_MAX;
   \                     ??encoder_test_18: (+1)
   \   0000011A   0x2403             MOVS     R4,#+3
    370                      }
    371                      //退出标志位置位
    372                      exit_flag = 1;
   \                     ??encoder_test_19: (+1)
   \   0000011C   0x2501             MOVS     R5,#+1
    373                      break;
   \   0000011E   0xE781             B.N      ??encoder_test_0
    374                      //右键按下向后翻页
    375                  case BT_RI_PRESS:
    376                      if(page_num < TEST_PAGE_MAX)
   \                     ??encoder_test_17: (+1)
   \   00000120   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000122   0x2C03             CMP      R4,#+3
   \   00000124   0xDA01             BGE.N    ??encoder_test_20
    377                      {
    378                          page_num++;
   \   00000126   0x1C64             ADDS     R4,R4,#+1
   \   00000128   0xE000             B.N      ??encoder_test_21
    379                      }
    380                      //如果当前页是最后一页，翻至最前一页
    381                      else
    382                      {
    383                          page_num = TEST_PAGE_MIN;
   \                     ??encoder_test_20: (+1)
   \   0000012A   0x2401             MOVS     R4,#+1
    384                      }
    385                      //退出标志位置位
    386                      exit_flag = 1;
   \                     ??encoder_test_21: (+1)
   \   0000012C   0x2501             MOVS     R5,#+1
    387                      break;
   \   0000012E   0xE779             B.N      ??encoder_test_0
    388                  case BT_OK_PRESS:
    389                      break;
   \                     ??encoder_test_16: (+1)
   \   00000130   0xE778             B.N      ??encoder_test_0
    390          
    391                  default:
    392                      break;
   \                     ??encoder_test_13: (+1)
   \   00000132   0xE777             B.N      ??encoder_test_0
    393          
    394                  }
    395              }
    396              //PIT_ONE_Enable(PIT_1);
    397              return page_num;
   \                     ??encoder_test_2: (+1)
   \   00000134   0x0020             MOVS     R0,R4
   \   00000136   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000138   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    398          }

   \                                 In section .bss, align 1
   \                     `encoder_test::suc_count_flag`:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
   \                     `encoder_test::sl_time_count`:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     `encoder_test::sl_time_count_last`:
   \   00000000                      DS8 4
    399          
    400          /*===============================================================
    401          	@brief      退出测试函数
    402          	@function   按下确认键则测试程序   
    403          	@parameter  退出测试所属的页数
    404          	@return     根据按键左右返回需要进入的下一页页数
    405          ==================================================================*/

   \                                 In section .text, align 2, keep-with-next
    406          uint8 test_exit(uint8 page_num)
    407          {
   \                     test_exit: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
    408              int8  exit_flag = 0;
   \   00000004   0x2500             MOVS     R5,#+0
    409              uint8 button_value = 0;
   \   00000006   0x2600             MOVS     R6,#+0
    410              int16 infrared_value = 0;
   \   00000008   0x2700             MOVS     R7,#+0
    411              
    412              //显示信息
    413              oled_fill(0x00);
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x.... 0x....      BL       oled_fill
    414              oled_display_6x8str(10,2,"Exit car test ?");
   \   00000010   0x....             LDR.N    R2,??DataTable3_8
   \   00000012   0x2102             MOVS     R1,#+2
   \   00000014   0x200A             MOVS     R0,#+10
   \   00000016   0x.... 0x....      BL       oled_display_6x8str
   \   0000001A   0xE7FF             B.N      ??test_exit_0
    415          
    416              while(!exit_flag)
    417              {
    418                  //读取按键状态
    419                  button_value=button_scan();
    420          
    421          
    422                  infrared_value = get_infrared_command();
    423                  reset_infrared();
    424                  
    425                  switch(infrared_value)
    426                  {
    427                      case COMMAND_UP:
    428                          button_value = FIVE_DIR_UP;
    429                          break;
    430                      case COMMAND_DOWN:
    431                          button_value = FIVE_DIR_DOWN;
    432                          break;                    
    433                      case COMMAND_LEFT:
    434                          button_value = FIVE_DIR_LEFT;
    435                          break;                    
    436                      case COMMAND_RIGHT:
    437                          button_value = FIVE_DIR_RIGHT;
    438                          break;
    439                      case COMMAND_OK:
    440                          button_value = FIVE_DIR_OK;
    441                          break;     
    442                      default:
    443                          break;                                    
    444                  }
    445          
    446                  switch(button_value)
    447                  {
    448                  case BT_UP_PRESS:
    449                      break;
   \                     ??test_exit_1: (+1)
   \                     ??test_exit_0: (+1)
   \   0000001C   0xB26D             SXTB     R5,R5            ;; SignExt  R5,R5,#+24,#+24
   \   0000001E   0x2D00             CMP      R5,#+0
   \   00000020   0xD13F             BNE.N    ??test_exit_2
   \   00000022   0x.... 0x....      BL       button_scan
   \   00000026   0x0006             MOVS     R6,R0
   \   00000028   0x.... 0x....      BL       get_infrared_command
   \   0000002C   0x0007             MOVS     R7,R0
   \   0000002E   0x.... 0x....      BL       reset_infrared
   \   00000032   0xB23F             SXTH     R7,R7            ;; SignExt  R7,R7,#+16,#+16
   \   00000034   0x2F84             CMP      R7,#+132
   \   00000036   0xD00C             BEQ.N    ??test_exit_3
   \   00000038   0x2F8C             CMP      R7,#+140
   \   0000003A   0xD006             BEQ.N    ??test_exit_4
   \   0000003C   0x2F8E             CMP      R7,#+142
   \   0000003E   0xD00C             BEQ.N    ??test_exit_5
   \   00000040   0x2FA9             CMP      R7,#+169
   \   00000042   0xD004             BEQ.N    ??test_exit_6
   \   00000044   0x2FAD             CMP      R7,#+173
   \   00000046   0xD006             BEQ.N    ??test_exit_7
   \   00000048   0xE009             B.N      ??test_exit_8
   \                     ??test_exit_4: (+1)
   \   0000004A   0x2601             MOVS     R6,#+1
   \   0000004C   0xE007             B.N      ??test_exit_9
   \                     ??test_exit_6: (+1)
   \   0000004E   0x2602             MOVS     R6,#+2
   \   00000050   0xE005             B.N      ??test_exit_9
   \                     ??test_exit_3: (+1)
   \   00000052   0x2603             MOVS     R6,#+3
   \   00000054   0xE003             B.N      ??test_exit_9
   \                     ??test_exit_7: (+1)
   \   00000056   0x2604             MOVS     R6,#+4
   \   00000058   0xE001             B.N      ??test_exit_9
   \                     ??test_exit_5: (+1)
   \   0000005A   0x2605             MOVS     R6,#+5
   \   0000005C   0xE7FF             B.N      ??test_exit_9
   \                     ??test_exit_8: (+1)
   \                     ??test_exit_9: (+1)
   \   0000005E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000060   0x2E01             CMP      R6,#+1
   \   00000062   0xD0DB             BEQ.N    ??test_exit_1
   \   00000064   0xD31C             BCC.N    ??test_exit_10
   \   00000066   0x2E03             CMP      R6,#+3
   \   00000068   0xD005             BEQ.N    ??test_exit_11
   \   0000006A   0xD303             BCC.N    ??test_exit_12
   \   0000006C   0x2E05             CMP      R6,#+5
   \   0000006E   0xD012             BEQ.N    ??test_exit_13
   \   00000070   0xD309             BCC.N    ??test_exit_14
   \   00000072   0xE015             B.N      ??test_exit_10
    450                  case BT_DN_PRESS:
    451                      break;
   \                     ??test_exit_12: (+1)
   \   00000074   0xE7D2             B.N      ??test_exit_0
    452                      //左键向前翻页
    453                  case BT_LE_PRESS:
    454                      if(page_num > TEST_PAGE_MIN)
   \                     ??test_exit_11: (+1)
   \   00000076   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000078   0x2C02             CMP      R4,#+2
   \   0000007A   0xDB01             BLT.N    ??test_exit_15
    455                      {
    456                          page_num--;
   \   0000007C   0x1E64             SUBS     R4,R4,#+1
   \   0000007E   0xE000             B.N      ??test_exit_16
    457                      }
    458                      //如果当前页是最前页，翻至最后页
    459                      else
    460                      {
    461                          page_num = TEST_PAGE_MAX;
   \                     ??test_exit_15: (+1)
   \   00000080   0x2403             MOVS     R4,#+3
    462                      }
    463                      //退出标志位置位
    464                      exit_flag = 1;
   \                     ??test_exit_16: (+1)
   \   00000082   0x2501             MOVS     R5,#+1
    465                      break;
   \   00000084   0xE7CA             B.N      ??test_exit_0
    466                      //右键向后翻页
    467                  case BT_RI_PRESS:
    468                      if(page_num < TEST_PAGE_MAX)
   \                     ??test_exit_14: (+1)
   \   00000086   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000088   0x2C03             CMP      R4,#+3
   \   0000008A   0xDA01             BGE.N    ??test_exit_17
    469                      {
    470                          page_num++;
   \   0000008C   0x1C64             ADDS     R4,R4,#+1
   \   0000008E   0xE000             B.N      ??test_exit_18
    471                      }
    472                      //如果当前页是最后一页，则翻至最前页
    473                      else
    474                      {
    475                          page_num = TEST_PAGE_MIN;
   \                     ??test_exit_17: (+1)
   \   00000090   0x2401             MOVS     R4,#+1
    476                      }
    477                      //退出标志位置位
    478                      exit_flag = 1;
   \                     ??test_exit_18: (+1)
   \   00000092   0x2501             MOVS     R5,#+1
    479                      break;
   \   00000094   0xE7C2             B.N      ??test_exit_0
    480                      //确认键按下，退出测试程序
    481                  case BT_OK_PRESS:
    482                      //退出标志位置位
    483                      exit_flag = 1;
   \                     ??test_exit_13: (+1)
   \   00000096   0x2501             MOVS     R5,#+1
    484                      suc_exit_test_flag = FLAG_ON;
   \   00000098   0x2001             MOVS     R0,#+1
   \   0000009A   0x....             LDR.N    R1,??DataTable3_9
   \   0000009C   0x7008             STRB     R0,[R1, #+0]
    485                      break;
   \   0000009E   0xE7BD             B.N      ??test_exit_0
    486                  default:
    487                      break;
   \                     ??test_exit_10: (+1)
   \   000000A0   0xE7BC             B.N      ??test_exit_0
    488          
    489                  }
    490              }
    491              
    492              oled_fill(0x00);
   \                     ??test_exit_2: (+1)
   \   000000A2   0x2000             MOVS     R0,#+0
   \   000000A4   0x.... 0x....      BL       oled_fill
    493              
    494              return page_num;
   \   000000A8   0x0020             MOVS     R0,R4
   \   000000AA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000AC   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    495          }
    496          
    497          /*===============================================================
    498          	@brief      小车硬件测试函数
    499          	@function   led 拨码 液晶 红外   
    500          	@parameter  退出测试所属的页数
    501          	@note       在函数被调用前pit必须初始化，因为测速是在PIT里进行的，否则将读不到脉冲数和速度
    502          ==================================================================*/

   \                                 In section .text, align 2, keep-with-next
    503          void Smartcar_Test()
    504          {
   \                     Smartcar_Test: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    505              uint8 page_num = TEST_PAGE_MIN;
   \   00000002   0x2001             MOVS     R0,#+1
    506          
    507              suc_exit_test_flag = FLAG_OFF;
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x....             LDR.N    R2,??DataTable3_9
   \   00000008   0x7011             STRB     R1,[R2, #+0]
   \   0000000A   0xE002             B.N      ??Smartcar_Test_0
    508              
    509              //DisableInterrupts;
    510              while(suc_exit_test_flag != FLAG_ON)
    511              {
    512                  //根据页数进入相应的测试
    513                  switch(page_num)
    514                  {
    515                  case 1:
    516                      page_num = switch_test(1);
   \                     ??Smartcar_Test_1: (+1)
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x.... 0x....      BL       switch_test
    517                      break;
   \                     ??Smartcar_Test_0: (+1)
   \   00000012   0x....             LDR.N    R1,??DataTable3_9
   \   00000014   0x7809             LDRB     R1,[R1, #+0]
   \   00000016   0x2901             CMP      R1,#+1
   \   00000018   0xD00F             BEQ.N    ??Smartcar_Test_2
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x2801             CMP      R0,#+1
   \   0000001E   0xD0F5             BEQ.N    ??Smartcar_Test_1
   \   00000020   0xD30A             BCC.N    ??Smartcar_Test_3
   \   00000022   0x2803             CMP      R0,#+3
   \   00000024   0xD004             BEQ.N    ??Smartcar_Test_4
   \   00000026   0xD207             BCS.N    ??Smartcar_Test_3
    518                  case 2:
    519                      page_num = encoder_test(2);
   \                     ??Smartcar_Test_5: (+1)
   \   00000028   0x2002             MOVS     R0,#+2
   \   0000002A   0x.... 0x....      BL       encoder_test
    520                      break;            
   \   0000002E   0xE7F0             B.N      ??Smartcar_Test_0
    521                  case 3:
    522                      page_num = test_exit(TEST_PAGE_MAX);
   \                     ??Smartcar_Test_4: (+1)
   \   00000030   0x2003             MOVS     R0,#+3
   \   00000032   0x.... 0x....      BL       test_exit
    523                      break;
   \   00000036   0xE7EC             B.N      ??Smartcar_Test_0
    524                  default:
    525                      break;
   \                     ??Smartcar_Test_3: (+1)
   \   00000038   0xE7EB             B.N      ??Smartcar_Test_0
    526                  }
    527              }
    528              suc_exit_test_flag = FLAG_OFF;
   \                     ??Smartcar_Test_2: (+1)
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x....             LDR.N    R1,??DataTable3_9
   \   0000003E   0x7008             STRB     R0,[R1, #+0]
    529              
    530              //EnableInterrupts;//测试结束开总中断
    531          
    532          }
   \   00000040   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     `encoder_test::suc_count_flag`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     gul_time_100us

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     `encoder_test::sl_time_count_last`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     `encoder_test::sl_time_count`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     guc_car_run_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x........         DC32     gl_pwm_output

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x........         DC32     suc_exit_test_flag

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x69 0x6E          DC8 "infrared test"
   \              0x66 0x72    
   \              0x61 0x72    
   \              0x65 0x64    
   \              0x20 0x74    
   \              0x65 0x73    
   \              0x74 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x65 0x6E          DC8 "encoder"
   \              0x63 0x6F    
   \              0x64 0x65    
   \              0x72 0x00    

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x45 0x78          DC8 "Exit car test ?"
   \              0x69 0x74    
   \              0x20 0x63    
   \              0x61 0x72    
   \              0x20 0x74    
   \              0x65 0x73    
   \              0x74 0x20    
   \              0x3F 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Smartcar_Test
         8   -> encoder_test
         8   -> switch_test
         8   -> test_exit
      24   encoder_test
        24   -> Encoder_Test
        24   -> Motor_Output
        24   -> button_scan
        24   -> get_infrared_command
        24   -> oled_display_16x8str
        24   -> oled_fill
        24   -> oled_print_short
        24   -> reset_infrared
      16   infrared_test
        16   -> button_scan
        16   -> get_infrared_command
        16   -> oled_display_6x8str
        16   -> oled_fill
        16   -> oled_print_short
      24   led_test
        24   -> LED_Test
        24   -> button_scan
        24   -> get_infrared_command
        24   -> oled_fill
        24   -> reset_infrared
      24   switch_test
        24   -> Switch_Test
        24   -> button_scan
        24   -> get_infrared_command
        24   -> oled_fill
        24   -> reset_infrared
      24   test_exit
        24   -> button_scan
        24   -> get_infrared_command
        24   -> oled_display_6x8str
        24   -> oled_fill
        24   -> reset_infrared


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
      16  ?_0
       8  ?_1
      16  ?_2
      66  Smartcar_Test
     316  encoder_test
     120  infrared_test
     154  led_test
       4  sl_time_count
       4  sl_time_count_last
       1  suc_count_flag
       1  suc_exit_test_flag
     154  switch_test
     174  test_exit

 
    10 bytes in section .bss
    40 bytes in section .rodata
 1 024 bytes in section .text
 
 1 024 bytes of CODE  memory
    40 bytes of CONST memory
    10 bytes of DATA  memory

Errors: none
Warnings: none
