###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       08/Jul/2019  02:42:56
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\app\signal\src\calibration.c
#    Command line =  
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\app\signal\src\calibration.c
#        -D LPLD_K60 -lCN
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\FLASH\List
#        -lB
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\FLASH\List
#        -o
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\CPU\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\common\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\LPLD\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\LPLD\HW\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\FatFs\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\FatFs\option\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\USB\common\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\USB\driver\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\USB\descriptor\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\USB\class\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\control\inc\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\debug\inc\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\device\inc\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\signal\inc\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\system\inc\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\control\src\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\debug\src\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\device\src\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\signal\src\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\system\src\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\drivers\inc\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\drivers\src\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\charge\inc\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\charge\src\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\LPLD\FUNC\
#        -Ol -I "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    Locale       =  Chinese (Simplified)_China.936
#    List file    =  
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\FLASH\List\calibration.lst
#    Object file  =  
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\FLASH\Obj\calibration.o
#
###############################################################################

D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\app\signal\src\calibration.c
      1          /*=============================================
      2              @file         calibration.c
      3              @brief        电感标定
      4              @programmer   Beyond Hsueh
      5          =============================================*/
      6          
      7          #include "calibration.h"
      8          
      9          /*===============================================================
     10                  @note      今夕何夕兮，搴舟中流。
     11                             今日何日兮，得与王子同舟。
     12                             蒙羞被好兮，不訾诟耻。
     13                             心几烦而不绝兮，得知王子。
     14                             山有木兮木有枝，心悦君兮君不知。
     15          ==================================================================*/ 
     16          

   \                                 In section .bss, align 2
     17          static uint16 sui_cali_count = 0;
   \                     sui_cali_count:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
     18          static uint32 sul_cali_sum_edge = 0;
   \                     sul_cali_sum_edge:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     19          static uint32 sul_cali_sum_mid = 0;
   \                     sul_cali_sum_mid:
   \   00000000                      DS8 4
     20          
     21          /*===============================================================
     22          	@brief     获取中间电感准备标定
     23          ==================================================================*/

   \                                 In section .text, align 2, keep-with-next
     24          void Get_Middle_Standard(int16 *sensor_middle_value)
     25          {
   \                     Get_Middle_Standard: (+1)
   \   00000000   0xB410             PUSH     {R4}
     26              static uint8  middle_standard_value;
     27              static uint8  s_first_flag = 1;//归一化基准值
     28              static int16  s_sensor_middle_standard_history[SENSOR_MIDDLE_NUM] = {0};
     29              static int16  ADoffset;
     30              int16 sensor_middle_total = 0;
   \   00000002   0x2100             MOVS     R1,#+0
     31              int8 i;    
     32              
     33                //开机第一次执行
     34              if(s_first_flag == 1)
   \   00000004   0x....             LDR.N    R2,??DataTable4
   \   00000006   0x7812             LDRB     R2,[R2, #+0]
   \   00000008   0x2A01             CMP      R2,#+1
   \   0000000A   0xD114             BNE.N    ??Get_Middle_Standard_0
     35              {
     36          	s_first_flag = 0;
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E   0x....             LDR.N    R3,??DataTable4
   \   00000010   0x701A             STRB     R2,[R3, #+0]
     37          	for(i = SENSOR_MIDDLE_NUM - 1; i >= 0; i--)
   \   00000012   0x2203             MOVS     R2,#+3
   \   00000014   0xE007             B.N      ??Get_Middle_Standard_1
     38          	{
     39                      s_sensor_middle_standard_history[i] = ORIGINAL_VALUE + ADoffset;
   \                     ??Get_Middle_Standard_2: (+1)
   \   00000016   0x....             LDR.N    R3,??DataTable4_1
   \   00000018   0x881B             LDRH     R3,[R3, #+0]
   \   0000001A   0x3364             ADDS     R3,R3,#+100
   \   0000001C   0x....             LDR.N    R4,??DataTable4_2
   \   0000001E   0xB252             SXTB     R2,R2            ;; SignExt  R2,R2,#+24,#+24
   \   00000020   0xF824 0x3012      STRH     R3,[R4, R2, LSL #+1]
     40          	}
   \   00000024   0x1E52             SUBS     R2,R2,#+1
   \                     ??Get_Middle_Standard_1: (+1)
   \   00000026   0xB252             SXTB     R2,R2            ;; SignExt  R2,R2,#+24,#+24
   \   00000028   0x2A00             CMP      R2,#+0
   \   0000002A   0xD5F4             BPL.N    ??Get_Middle_Standard_2
     41          	middle_standard_value = ORIGINAL_VALUE + ADoffset;
   \   0000002C   0x....             LDR.N    R2,??DataTable4_1
   \   0000002E   0x8812             LDRH     R2,[R2, #+0]
   \   00000030   0x3264             ADDS     R2,R2,#+100
   \   00000032   0x....             LDR.N    R3,??DataTable4_3
   \   00000034   0x701A             STRB     R2,[R3, #+0]
     42              }
     43          
     44              if(*sensor_middle_value >= ORIGINAL_LEAST_VALUE)
   \                     ??Get_Middle_Standard_0: (+1)
   \   00000036   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
   \   0000003A   0x2A50             CMP      R2,#+80
   \   0000003C   0xDB24             BLT.N    ??Get_Middle_Standard_3
     45              {
     46                  //更新标定基准值，直道条件满足一定次数更新一次。
     47                  for(i = SENSOR_MIDDLE_NUM - 1; i >= 1; i--)
   \   0000003E   0x2203             MOVS     R2,#+3
   \   00000040   0xE00F             B.N      ??Get_Middle_Standard_4
     48                  {
     49                      s_sensor_middle_standard_history[i] = s_sensor_middle_standard_history[i-1];
   \                     ??Get_Middle_Standard_5: (+1)
   \   00000042   0x....             LDR.N    R3,??DataTable4_2
   \   00000044   0xB252             SXTB     R2,R2            ;; SignExt  R2,R2,#+24,#+24
   \   00000046   0xEB03 0x0342      ADD      R3,R3,R2, LSL #+1
   \   0000004A   0xF833 0x3C02      LDRH     R3,[R3, #-2]
   \   0000004E   0x....             LDR.N    R4,??DataTable4_2
   \   00000050   0xB252             SXTB     R2,R2            ;; SignExt  R2,R2,#+24,#+24
   \   00000052   0xF824 0x3012      STRH     R3,[R4, R2, LSL #+1]
     50                      sensor_middle_total += s_sensor_middle_standard_history[i];
   \   00000056   0x....             LDR.N    R3,??DataTable4_2
   \   00000058   0xB252             SXTB     R2,R2            ;; SignExt  R2,R2,#+24,#+24
   \   0000005A   0xF833 0x3012      LDRH     R3,[R3, R2, LSL #+1]
   \   0000005E   0x1859             ADDS     R1,R3,R1
     51                  }
   \   00000060   0x1E52             SUBS     R2,R2,#+1
   \                     ??Get_Middle_Standard_4: (+1)
   \   00000062   0xB252             SXTB     R2,R2            ;; SignExt  R2,R2,#+24,#+24
   \   00000064   0x2A01             CMP      R2,#+1
   \   00000066   0xDAEC             BGE.N    ??Get_Middle_Standard_5
     52                  s_sensor_middle_standard_history[0] = *sensor_middle_value;
   \   00000068   0x8802             LDRH     R2,[R0, #+0]
   \   0000006A   0x....             LDR.N    R3,??DataTable4_2
   \   0000006C   0x801A             STRH     R2,[R3, #+0]
     53                  sensor_middle_total += s_sensor_middle_standard_history[0];
   \   0000006E   0x....             LDR.N    R2,??DataTable4_2
   \   00000070   0x8812             LDRH     R2,[R2, #+0]
   \   00000072   0x1851             ADDS     R1,R2,R1
     54          
     55                  middle_standard_value = (int16)(sensor_middle_total/SENSOR_MIDDLE_NUM);	
   \   00000074   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000076   0x2204             MOVS     R2,#+4
   \   00000078   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   0000007C   0x....             LDR.N    R2,??DataTable4_3
   \   0000007E   0x7011             STRB     R1,[R2, #+0]
     56                  s_sensor_middle_standard_history[0] = middle_standard_value;
   \   00000080   0x....             LDR.N    R1,??DataTable4_3
   \   00000082   0x7809             LDRB     R1,[R1, #+0]
   \   00000084   0x....             LDR.N    R2,??DataTable4_2
   \   00000086   0x8011             STRH     R1,[R2, #+0]
     57              }	
     58          
     59              middle_standard_value = *sensor_middle_value;
   \                     ??Get_Middle_Standard_3: (+1)
   \   00000088   0x8800             LDRH     R0,[R0, #+0]
   \   0000008A   0x....             LDR.N    R1,??DataTable4_3
   \   0000008C   0x7008             STRB     R0,[R1, #+0]
     60          }
   \   0000008E   0xBC10             POP      {R4}
   \   00000090   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 1
   \                     `Get_Middle_Standard::middle_standard_value`:
   \   00000000                      DS8 1

   \                                 In section .data, align 1
   \                     `Get_Middle_Standard::s_first_flag`:
   \   00000000   0x01               DC8 1

   \                                 In section .bss, align 4
   \                     `Get_Middle_Standard::s_sensor_middle_standard_history`:
   \   00000000                      DS8 8

   \                                 In section .bss, align 2
   \                     `Get_Middle_Standard::ADoffset`:
   \   00000000                      DS8 2
     61          
     62          /*===============================================================
     63          	@brief     归一化电感值
     64          	@note      使用中间横电感标定
     65          ==================================================================*/

   \                                 In section .text, align 2, keep-with-next
     66          void Calibrate_All_Inductor(vint16 inductor_value[])
     67          {
   \                     Calibrate_All_Inductor: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0006             MOVS     R6,R0
     68              int i = 0;
   \   00000004   0x2700             MOVS     R7,#+0
     69              double middle_standard_temp = 0, calculate_temp = 0;	
   \   00000006   0x2400             MOVS     R4,#+0
   \   00000008   0x2500             MOVS     R5,#+0
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x2100             MOVS     R1,#+0
     70              middle_standard_temp = gi_calibration_middle;
   \   0000000E   0x....             LDR.N    R0,??DataTable4_4
   \   00000010   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000014   0x.... 0x....      BL       __aeabi_i2d
   \   00000018   0x0004             MOVS     R4,R0
   \   0000001A   0x000D             MOVS     R5,R1
     71              
     72              for(i = 0; i < NUM_INDUCTOR; i++)
   \   0000001C   0x2700             MOVS     R7,#+0
   \   0000001E   0xE013             B.N      ??Calibrate_All_Inductor_0
     73              {
     74                  calculate_temp = inductor_value[i] * AD_NORMAL_ORIGINAL;
   \                     ??Calibrate_All_Inductor_1: (+1)
   \   00000020   0xF936 0x0017      LDRSH    R0,[R6, R7, LSL #+1]
   \   00000024   0x21A0             MOVS     R1,#+160
   \   00000026   0xFB10 0xF001      SMULBB   R0,R0,R1
   \   0000002A   0x.... 0x....      BL       __aeabi_i2d
     75                  calculate_temp = calculate_temp / middle_standard_temp;
   \   0000002E   0x0022             MOVS     R2,R4
   \   00000030   0x002B             MOVS     R3,R5
   \   00000032   0x.... 0x....      BL       __aeabi_ddiv
     76                  inductor_value[i] = (int16)(calculate_temp * 0.0625) ;//转换为8位精度
   \   00000036   0x2200             MOVS     R2,#+0
   \   00000038   0x....             LDR.N    R3,??DataTable4_5  ;; 0x3fb00000
   \   0000003A   0x.... 0x....      BL       __aeabi_dmul
   \   0000003E   0x.... 0x....      BL       __aeabi_d2iz
   \   00000042   0xF826 0x0017      STRH     R0,[R6, R7, LSL #+1]
     77              }
   \   00000046   0x1C7F             ADDS     R7,R7,#+1
   \                     ??Calibrate_All_Inductor_0: (+1)
   \   00000048   0x2F05             CMP      R7,#+5
   \   0000004A   0xDBE9             BLT.N    ??Calibrate_All_Inductor_1
     78          }
   \   0000004C   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
     79          
     80          /*===============================================================
     81          	@brief     电感标定基准值
     82          ==================================================================*/

   \                                 In section .text, align 2, keep-with-next
     83          void Get_Standard_Inductor()
     84          {
   \                     Get_Standard_Inductor: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
     85              float standard_k,standard_k_1;//中间电感及两边电感标定系数
     86          
     87              //使用中间横电感标定
     88              standard_k = 1000.0/(float)(gi_inductor_calibrate_value[CALI_MID]);
   \   00000002   0x....             LDR.N    R0,??DataTable4_6
   \   00000004   0xF9B0 0x0002      LDRSH    R0,[R0, #+2]
   \   00000008   0x.... 0x....      BL       __aeabi_i2f
   \   0000000C   0x.... 0x....      BL       __aeabi_f2d
   \   00000010   0x0002             MOVS     R2,R0
   \   00000012   0x000B             MOVS     R3,R1
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x....             LDR.N    R1,??DataTable4_7  ;; 0x408f4000
   \   00000018   0x.... 0x....      BL       __aeabi_ddiv
   \   0000001C   0x.... 0x....      BL       __aeabi_d2f
   \   00000020   0x0006             MOVS     R6,R0
     89              standard_k_1 = 450.0/(float)(gi_inductor_calibrate_value[CALI_LR])/2 + standard_k/2;
   \   00000022   0x....             LDR.N    R0,??DataTable4_6
   \   00000024   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000028   0x.... 0x....      BL       __aeabi_i2f
   \   0000002C   0x.... 0x....      BL       __aeabi_f2d
   \   00000030   0x0002             MOVS     R2,R0
   \   00000032   0x000B             MOVS     R3,R1
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x....             LDR.N    R1,??DataTable4_8  ;; 0x407c2000
   \   00000038   0x.... 0x....      BL       __aeabi_ddiv
   \   0000003C   0x2200             MOVS     R2,#+0
   \   0000003E   0xF05F 0x4380      MOVS     R3,#+1073741824
   \   00000042   0x.... 0x....      BL       __aeabi_ddiv
   \   00000046   0x0004             MOVS     R4,R0
   \   00000048   0x000D             MOVS     R5,R1
   \   0000004A   0x0030             MOVS     R0,R6
   \   0000004C   0xF05F 0x4180      MOVS     R1,#+1073741824
   \   00000050   0x.... 0x....      BL       __aeabi_fdiv
   \   00000054   0x.... 0x....      BL       __aeabi_f2d
   \   00000058   0x0022             MOVS     R2,R4
   \   0000005A   0x002B             MOVS     R3,R5
   \   0000005C   0x.... 0x....      BL       __aeabi_dadd
   \   00000060   0x.... 0x....      BL       __aeabi_d2f
   \   00000064   0x0004             MOVS     R4,R0
     90          
     91              gi_inductor_value[M_BACK] = (int16)(standard_k * gi_inductor_adc[M_BACK] + 1);
   \   00000066   0x....             LDR.N    R0,??DataTable4_9
   \   00000068   0xF9B0 0x0004      LDRSH    R0,[R0, #+4]
   \   0000006C   0x.... 0x....      BL       __aeabi_i2f
   \   00000070   0x0031             MOVS     R1,R6
   \   00000072   0x.... 0x....      BL       __aeabi_fmul
   \   00000076   0xF05F 0x517E      MOVS     R1,#+1065353216
   \   0000007A   0x.... 0x....      BL       __aeabi_fadd
   \   0000007E   0x.... 0x....      BL       __aeabi_f2iz
   \   00000082   0x....             LDR.N    R1,??DataTable4_10
   \   00000084   0x8088             STRH     R0,[R1, #+4]
     92              gi_inductor_value[X_LEFT] = (int16)(standard_k_1 * gi_inductor_adc[X_LEFT] + 1);
   \   00000086   0x....             LDR.N    R0,??DataTable4_9
   \   00000088   0xF9B0 0x0002      LDRSH    R0,[R0, #+2]
   \   0000008C   0x.... 0x....      BL       __aeabi_i2f
   \   00000090   0x0021             MOVS     R1,R4
   \   00000092   0x.... 0x....      BL       __aeabi_fmul
   \   00000096   0xF05F 0x517E      MOVS     R1,#+1065353216
   \   0000009A   0x.... 0x....      BL       __aeabi_fadd
   \   0000009E   0x.... 0x....      BL       __aeabi_f2iz
   \   000000A2   0x....             LDR.N    R1,??DataTable4_10
   \   000000A4   0x8048             STRH     R0,[R1, #+2]
     93              gi_inductor_value[X_RIGHT] = (int16)(standard_k_1 * gi_inductor_adc[X_RIGHT] + 1);
   \   000000A6   0x....             LDR.N    R0,??DataTable4_9
   \   000000A8   0xF9B0 0x0006      LDRSH    R0,[R0, #+6]
   \   000000AC   0x.... 0x....      BL       __aeabi_i2f
   \   000000B0   0x0021             MOVS     R1,R4
   \   000000B2   0x.... 0x....      BL       __aeabi_fmul
   \   000000B6   0xF05F 0x517E      MOVS     R1,#+1065353216
   \   000000BA   0x.... 0x....      BL       __aeabi_fadd
   \   000000BE   0x.... 0x....      BL       __aeabi_f2iz
   \   000000C2   0x....             LDR.N    R1,??DataTable4_10
   \   000000C4   0x80C8             STRH     R0,[R1, #+6]
     94              gi_inductor_value[T_LEFT] = (int16)(standard_k * gi_inductor_adc[T_LEFT] + 1);
   \   000000C6   0x....             LDR.N    R0,??DataTable4_9
   \   000000C8   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   000000CC   0x.... 0x....      BL       __aeabi_i2f
   \   000000D0   0x0031             MOVS     R1,R6
   \   000000D2   0x.... 0x....      BL       __aeabi_fmul
   \   000000D6   0xF05F 0x517E      MOVS     R1,#+1065353216
   \   000000DA   0x.... 0x....      BL       __aeabi_fadd
   \   000000DE   0x.... 0x....      BL       __aeabi_f2iz
   \   000000E2   0x....             LDR.N    R1,??DataTable4_10
   \   000000E4   0x8008             STRH     R0,[R1, #+0]
     95              gi_inductor_value[T_RIGHT] = (int16)(standard_k * gi_inductor_adc[T_RIGHT] + 1);
   \   000000E6   0x....             LDR.N    R0,??DataTable4_9
   \   000000E8   0xF9B0 0x0008      LDRSH    R0,[R0, #+8]
   \   000000EC   0x.... 0x....      BL       __aeabi_i2f
   \   000000F0   0x0031             MOVS     R1,R6
   \   000000F2   0x.... 0x....      BL       __aeabi_fmul
   \   000000F6   0xF05F 0x517E      MOVS     R1,#+1065353216
   \   000000FA   0x.... 0x....      BL       __aeabi_fadd
   \   000000FE   0x.... 0x....      BL       __aeabi_f2iz
   \   00000102   0x....             LDR.N    R1,??DataTable4_10
   \   00000104   0x8108             STRH     R0,[R1, #+8]
     96          }
   \   00000106   0xBD70             POP      {R4-R6,PC}       ;; return
     97          
     98          /*===============================================================
     99          	@brief     标定中心横电感和两侧横电感
    100          ==================================================================*/

   \                                 In section .text, align 2, keep-with-next
    101          void Calibrate_Once()
    102          {
   \                     Calibrate_Once: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    103              if(sui_cali_count < MAX_CALI_COUNT)
   \   00000002   0x....             LDR.N    R0,??DataTable4_11
   \   00000004   0x8800             LDRH     R0,[R0, #+0]
   \   00000006   0x2864             CMP      R0,#+100
   \   00000008   0xDA1D             BGE.N    ??Calibrate_Once_0
    104              {
    105                  sui_cali_count++;
   \   0000000A   0x....             LDR.N    R0,??DataTable4_11
   \   0000000C   0x8800             LDRH     R0,[R0, #+0]
   \   0000000E   0x1C40             ADDS     R0,R0,#+1
   \   00000010   0x....             LDR.N    R1,??DataTable4_11
   \   00000012   0x8008             STRH     R0,[R1, #+0]
    106                  sul_cali_sum_edge += gi_inductor_adc[X_LEFT];
   \   00000014   0x....             LDR.N    R0,??DataTable4_12
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0x....             LDR.N    R1,??DataTable4_9
   \   0000001A   0xF9B1 0x1002      LDRSH    R1,[R1, #+2]
   \   0000001E   0x1840             ADDS     R0,R0,R1
   \   00000020   0x....             LDR.N    R1,??DataTable4_12
   \   00000022   0x6008             STR      R0,[R1, #+0]
    107                  sul_cali_sum_edge += gi_inductor_adc[X_RIGHT];
   \   00000024   0x....             LDR.N    R0,??DataTable4_12
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x....             LDR.N    R1,??DataTable4_9
   \   0000002A   0xF9B1 0x1006      LDRSH    R1,[R1, #+6]
   \   0000002E   0x1840             ADDS     R0,R0,R1
   \   00000030   0x....             LDR.N    R1,??DataTable4_12
   \   00000032   0x6008             STR      R0,[R1, #+0]
    108                  sul_cali_sum_mid += gi_inductor_adc[M_BACK];
   \   00000034   0x....             LDR.N    R0,??DataTable4_13
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0x....             LDR.N    R1,??DataTable4_9
   \   0000003A   0xF9B1 0x1004      LDRSH    R1,[R1, #+4]
   \   0000003E   0x1840             ADDS     R0,R0,R1
   \   00000040   0x....             LDR.N    R1,??DataTable4_13
   \   00000042   0x6008             STR      R0,[R1, #+0]
   \   00000044   0xE001             B.N      ??Calibrate_Once_1
    109              }
    110              else
    111              {
    112                  End_Calibration();   
   \                     ??Calibrate_Once_0: (+1)
   \   00000046   0x.... 0x....      BL       End_Calibration
    113              }
    114          }
   \                     ??Calibrate_Once_1: (+1)
   \   0000004A   0xBD01             POP      {R0,PC}          ;; return
    115          
    116          /*===============================================================
    117          	@brief     结束标定
    118          ==================================================================*/

   \                                 In section .text, align 2, keep-with-next
    119          void End_Calibration()
    120          {
   \                     End_Calibration: (+1)
   \   00000000   0xB081             SUB      SP,SP,#+4
    121              uint16 cali_value_temp[2];
    122              static int16 si_cali_times = 0;
    123              static int32 sl_cali_value_summation[2];//记录所有标定和
    124              static int32 sl_cali_weight  = 50;
    125              
    126              if((sl_cali_value_summation[CALI_LR] == 0) && (sl_cali_value_summation[CALI_MID] == 0))
   \   00000002   0x....             LDR.N    R0,??DataTable4_14
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD113             BNE.N    ??End_Calibration_0
   \   0000000A   0x....             LDR.N    R0,??DataTable4_14
   \   0000000C   0x6840             LDR      R0,[R0, #+4]
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD10F             BNE.N    ??End_Calibration_0
    127              {
    128                  sl_cali_value_summation[CALI_LR] = gi_inductor_calibrate_value[CALI_LR] * sl_cali_weight;
   \   00000012   0x....             LDR.N    R0,??DataTable4_6
   \   00000014   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000018   0x....             LDR.N    R1,??DataTable4_15
   \   0000001A   0x6809             LDR      R1,[R1, #+0]
   \   0000001C   0x4348             MULS     R0,R1,R0
   \   0000001E   0x....             LDR.N    R1,??DataTable4_14
   \   00000020   0x6008             STR      R0,[R1, #+0]
    129                  sl_cali_value_summation[CALI_MID] = gi_inductor_calibrate_value[CALI_MID] * sl_cali_weight;
   \   00000022   0x....             LDR.N    R0,??DataTable4_6
   \   00000024   0xF9B0 0x0002      LDRSH    R0,[R0, #+2]
   \   00000028   0x....             LDR.N    R1,??DataTable4_15
   \   0000002A   0x6809             LDR      R1,[R1, #+0]
   \   0000002C   0x4348             MULS     R0,R1,R0
   \   0000002E   0x....             LDR.N    R1,??DataTable4_14
   \   00000030   0x6048             STR      R0,[R1, #+4]
    130              }
    131              if((sui_cali_count > 20) && (si_cali_times < 5))
   \                     ??End_Calibration_0: (+1)
   \   00000032   0x....             LDR.N    R0,??DataTable4_11
   \   00000034   0x8800             LDRH     R0,[R0, #+0]
   \   00000036   0x2815             CMP      R0,#+21
   \   00000038   0xDB45             BLT.N    ??End_Calibration_1
   \   0000003A   0x....             LDR.N    R0,??DataTable4_16
   \   0000003C   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000040   0x2805             CMP      R0,#+5
   \   00000042   0xDA40             BGE.N    ??End_Calibration_1
    132              {
    133                  cali_value_temp[CALI_LR] = sul_cali_sum_edge / sui_cali_count / 2;       //对标定和取平均
   \   00000044   0x....             LDR.N    R0,??DataTable4_12
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0x....             LDR.N    R1,??DataTable4_11
   \   0000004A   0x8809             LDRH     R1,[R1, #+0]
   \   0000004C   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000050   0x0840             LSRS     R0,R0,#+1
   \   00000052   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    134                  cali_value_temp[CALI_MID] = sul_cali_sum_mid / sui_cali_count;
   \   00000056   0x....             LDR.N    R0,??DataTable4_13
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x....             LDR.N    R1,??DataTable4_11
   \   0000005C   0x8809             LDRH     R1,[R1, #+0]
   \   0000005E   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000062   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    135                
    136                  si_cali_times++;
   \   00000066   0x....             LDR.N    R0,??DataTable4_16
   \   00000068   0x8800             LDRH     R0,[R0, #+0]
   \   0000006A   0x1C40             ADDS     R0,R0,#+1
   \   0000006C   0x....             LDR.N    R1,??DataTable4_16
   \   0000006E   0x8008             STRH     R0,[R1, #+0]
    137                  
    138                  sl_cali_value_summation[CALI_LR] += cali_value_temp[CALI_LR] * sui_cali_count;
   \   00000070   0x....             LDR.N    R0,??DataTable4_14
   \   00000072   0x6800             LDR      R0,[R0, #+0]
   \   00000074   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000078   0x....             LDR.N    R2,??DataTable4_11
   \   0000007A   0x8812             LDRH     R2,[R2, #+0]
   \   0000007C   0xFB02 0x0001      MLA      R0,R2,R1,R0
   \   00000080   0x....             LDR.N    R1,??DataTable4_14
   \   00000082   0x6008             STR      R0,[R1, #+0]
    139                  sl_cali_value_summation[CALI_MID] += cali_value_temp[CALI_MID] * sui_cali_count;
   \   00000084   0x....             LDR.N    R0,??DataTable4_14
   \   00000086   0x6840             LDR      R0,[R0, #+4]
   \   00000088   0xF8BD 0x1002      LDRH     R1,[SP, #+2]
   \   0000008C   0x....             LDR.N    R2,??DataTable4_11
   \   0000008E   0x8812             LDRH     R2,[R2, #+0]
   \   00000090   0xFB02 0x0001      MLA      R0,R2,R1,R0
   \   00000094   0x....             LDR.N    R1,??DataTable4_14
   \   00000096   0x6048             STR      R0,[R1, #+4]
    140                  sl_cali_weight += sui_cali_count;          //记录权值
   \   00000098   0x....             LDR.N    R0,??DataTable4_15
   \   0000009A   0x6800             LDR      R0,[R0, #+0]
   \   0000009C   0x....             LDR.N    R1,??DataTable4_11
   \   0000009E   0x8809             LDRH     R1,[R1, #+0]
   \   000000A0   0x1840             ADDS     R0,R0,R1
   \   000000A2   0x....             LDR.N    R1,??DataTable4_15
   \   000000A4   0x6008             STR      R0,[R1, #+0]
    141                  
    142                  //滤波，一次标定只会对标定值产生少量影响，消除偶然跳变
    143                  gi_inductor_calibrate_value[CALI_LR] = sl_cali_value_summation[CALI_LR] / sl_cali_weight;   
   \   000000A6   0x....             LDR.N    R0,??DataTable4_14
   \   000000A8   0x6800             LDR      R0,[R0, #+0]
   \   000000AA   0x....             LDR.N    R1,??DataTable4_15
   \   000000AC   0x6809             LDR      R1,[R1, #+0]
   \   000000AE   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000000B2   0x....             LDR.N    R1,??DataTable4_6
   \   000000B4   0x8008             STRH     R0,[R1, #+0]
    144                  gi_inductor_calibrate_value[CALI_MID] = sl_cali_value_summation[CALI_MID] / sl_cali_weight;
   \   000000B6   0x....             LDR.N    R0,??DataTable4_14
   \   000000B8   0x6840             LDR      R0,[R0, #+4]
   \   000000BA   0x....             LDR.N    R1,??DataTable4_15
   \   000000BC   0x6809             LDR      R1,[R1, #+0]
   \   000000BE   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000000C2   0x....             LDR.N    R1,??DataTable4_6
   \   000000C4   0x8048             STRH     R0,[R1, #+2]
    145              }
    146              
    147              sul_cali_sum_edge = 0;
   \                     ??End_Calibration_1: (+1)
   \   000000C6   0x2000             MOVS     R0,#+0
   \   000000C8   0x....             LDR.N    R1,??DataTable4_12
   \   000000CA   0x6008             STR      R0,[R1, #+0]
    148              sul_cali_sum_mid = 0;
   \   000000CC   0x2000             MOVS     R0,#+0
   \   000000CE   0x....             LDR.N    R1,??DataTable4_13
   \   000000D0   0x6008             STR      R0,[R1, #+0]
    149              sui_cali_count = 0;
   \   000000D2   0x2000             MOVS     R0,#+0
   \   000000D4   0x....             LDR.N    R1,??DataTable4_11
   \   000000D6   0x8008             STRH     R0,[R1, #+0]
    150          }
   \   000000D8   0xB001             ADD      SP,SP,#+4
   \   000000DA   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 2
   \                     `End_Calibration::si_cali_times`:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
   \                     `End_Calibration::sl_cali_value_summation`:
   \   00000000                      DS8 8

   \                                 In section .data, align 4
   \                     `End_Calibration::sl_cali_weight`:
   \   00000000   0x00000032         DC32 50

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     `Get_Middle_Standard::s_first_flag`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     `Get_Middle_Standard::ADoffset`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     `Get_Middle_Standard::s_sensor_middle_standard_history`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     `Get_Middle_Standard::middle_standard_value`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     gi_calibration_middle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x3FB00000         DC32     0x3fb00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x........         DC32     gi_inductor_calibrate_value

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x408F4000         DC32     0x408f4000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x407C2000         DC32     0x407c2000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x........         DC32     gi_inductor_adc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0x........         DC32     gi_inductor_value

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   0x........         DC32     sui_cali_count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \   00000000   0x........         DC32     sul_cali_sum_edge

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_13:
   \   00000000   0x........         DC32     sul_cali_sum_mid

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_14:
   \   00000000   0x........         DC32     `End_Calibration::sl_cali_value_summation`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_15:
   \   00000000   0x........         DC32     `End_Calibration::sl_cali_weight`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_16:
   \   00000000   0x........         DC32     `End_Calibration::si_cali_times`

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   Calibrate_All_Inductor
        24   -> __aeabi_d2iz
        24   -> __aeabi_ddiv
        24   -> __aeabi_dmul
        24   -> __aeabi_i2d
       8   Calibrate_Once
         8   -> End_Calibration
       4   End_Calibration
       4   Get_Middle_Standard
      16   Get_Standard_Inductor
        16   -> __aeabi_d2f
        16   -> __aeabi_dadd
        16   -> __aeabi_ddiv
        16   -> __aeabi_f2d
        16   -> __aeabi_f2iz
        16   -> __aeabi_fadd
        16   -> __aeabi_fdiv
        16   -> __aeabi_fmul
        16   -> __aeabi_i2f


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_14
       4  ??DataTable4_15
       4  ??DataTable4_16
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
       2  ADoffset
      78  Calibrate_All_Inductor
      76  Calibrate_Once
     220  End_Calibration
     146  Get_Middle_Standard
     264  Get_Standard_Inductor
       1  middle_standard_value
       1  s_first_flag
       8  s_sensor_middle_standard_history
       2  si_cali_times
       8  sl_cali_value_summation
       4  sl_cali_weight
       2  sui_cali_count
       4  sul_cali_sum_edge
       4  sul_cali_sum_mid

 
  31 bytes in section .bss
   5 bytes in section .data
 852 bytes in section .text
 
 852 bytes of CODE memory
  36 bytes of DATA memory

Errors: none
Warnings: none
