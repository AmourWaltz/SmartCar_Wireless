###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       08/Jul/2019  02:43:02
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\app\device\src\reed.c
#    Command line =  
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\app\device\src\reed.c
#        -D LPLD_K60 -lCN
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\FLASH\List
#        -lB
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\FLASH\List
#        -o
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\CPU\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\common\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\LPLD\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\LPLD\HW\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\FatFs\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\FatFs\option\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\USB\common\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\USB\driver\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\USB\descriptor\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\USB\class\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\control\inc\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\debug\inc\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\device\inc\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\signal\inc\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\system\inc\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\control\src\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\debug\src\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\device\src\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\signal\src\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\system\src\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\drivers\inc\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\drivers\src\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\charge\inc\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\app\charge\src\
#        -I
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\..\..\..\lib\LPLD\FUNC\
#        -Ol -I "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    Locale       =  Chinese (Simplified)_China.936
#    List file    =  
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\FLASH\List\reed.lst
#    Object file  =  
#        D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\iar\FLASH\Obj\reed.o
#
###############################################################################

D:\Freescale\无线节能14th\wireless_energy_saving_14th\14th_wireless_energy_saving_NXP\14th_wireless_energy_saving\project\14th_wireless_energy_saving\app\device\src\reed.c
      1          /*=============================================
      2              @file         reed.c
      3              @brief        干簧管
      4              @programmer   Beyond Hsueh
      5          =============================================*/
      6          
      7          #include "reed.h"
      8          
      9          /*===============================================================
     10                  @note      北方有佳人，绝世而独立。 
     11                             一顾倾人城，再顾倾人国。 
     12                             宁不知倾城与倾国？佳人难再得。
     13          ==================================================================*/ 
     14          
     15          /*===============================================================
     16          	@brief     干簧管初始化
     17          ==================================================================*/

   \                                 In section .text, align 2, keep-with-next
     18          void Reed_Init(void)
     19          {
   \                     Reed_Init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
     20          	GPIO_InitTypeDef struct_reed_switch = {0};
   \   00000004   0xA801             ADD      R0,SP,#+4
   \   00000006   0x2114             MOVS     R1,#+20
   \   00000008   0x.... 0x....      BL       __aeabi_memclr4
     21          
     22          #ifdef REED_SWITCH_0
     23          	struct_reed_switch.GPIO_PTx = REED_SWITCH_0_PORT;// 干簧管0端口号初始化
   \   0000000C   0x....             LDR.N    R0,??DataTable1  ;; 0x400ff100
   \   0000000E   0x9001             STR      R0,[SP, #+4]
     24          	struct_reed_switch.GPIO_Pins = REED_SWITCH_0_PIN;// 干簧管0引脚号初始化
   \   00000010   0x2040             MOVS     R0,#+64
   \   00000012   0x9002             STR      R0,[SP, #+8]
     25          	struct_reed_switch.GPIO_Dir = DIR_INPUT;// 干簧管0输入
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xF88D 0x0010      STRB     R0,[SP, #+16]
     26                  struct_reed_switch.GPIO_PinControl = INPUT_PULL_UP;
   \   0000001A   0x2003             MOVS     R0,#+3
   \   0000001C   0x9003             STR      R0,[SP, #+12]
     27          	struct_reed_switch.GPIO_PinControl = IRQC_DIS;// 禁用触发
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x9003             STR      R0,[SP, #+12]
     28          	LPLD_GPIO_Init(struct_reed_switch);
   \   00000022   0xA901             ADD      R1,SP,#+4
   \   00000024   0xB084             SUB      SP,SP,#+16
   \   00000026   0x4668             MOV      R0,SP
   \   00000028   0x2214             MOVS     R2,#+20
   \   0000002A   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000002E   0xBC0F             POP      {R0-R3}
   \   00000030   0x.... 0x....      BL       LPLD_GPIO_Init
     29          #endif
     30          
     31          #ifdef REED_SWITCH_1
     32          	struct_reed_switch.GPIO_PTx = REED_SWITCH_1_PORT;//干簧管1端口号初始化
   \   00000034   0x....             LDR.N    R0,??DataTable1  ;; 0x400ff100
   \   00000036   0x9001             STR      R0,[SP, #+4]
     33          	struct_reed_switch.GPIO_Pins = REED_SWITCH_1_PIN;//干簧管1引脚号初始化
   \   00000038   0xF44F 0x7080      MOV      R0,#+256
   \   0000003C   0x9002             STR      R0,[SP, #+8]
     34          	struct_reed_switch.GPIO_Dir = DIR_INPUT;// 干簧管1输入
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0xF88D 0x0010      STRB     R0,[SP, #+16]
     35                  struct_reed_switch.GPIO_PinControl = INPUT_PULL_UP;
   \   00000044   0x2003             MOVS     R0,#+3
   \   00000046   0x9003             STR      R0,[SP, #+12]
     36          	struct_reed_switch.GPIO_PinControl = IRQC_DIS;//禁用触发
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x9003             STR      R0,[SP, #+12]
     37          	LPLD_GPIO_Init(struct_reed_switch);
   \   0000004C   0xA901             ADD      R1,SP,#+4
   \   0000004E   0xB084             SUB      SP,SP,#+16
   \   00000050   0x4668             MOV      R0,SP
   \   00000052   0x2214             MOVS     R2,#+20
   \   00000054   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000058   0xBC0F             POP      {R0-R3}
   \   0000005A   0x.... 0x....      BL       LPLD_GPIO_Init
     38          #endif
     39          
     40          #ifdef REED_SWITCH_2
     41          	struct_reed_switch.GPIO_PTx = REED_SWITCH_2_PORT;//干簧管2端口号初始化
   \   0000005E   0x....             LDR.N    R0,??DataTable1  ;; 0x400ff100
   \   00000060   0x9001             STR      R0,[SP, #+4]
     42          	struct_reed_switch.GPIO_Pins = REED_SWITCH_2_PIN;//干簧管2引脚号初始化
   \   00000062   0xF44F 0x6080      MOV      R0,#+1024
   \   00000066   0x9002             STR      R0,[SP, #+8]
     43          	struct_reed_switch.GPIO_Dir = DIR_INPUT;//干簧管2输入
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0xF88D 0x0010      STRB     R0,[SP, #+16]
     44                  struct_reed_switch.GPIO_PinControl = INPUT_PULL_UP;
   \   0000006E   0x2003             MOVS     R0,#+3
   \   00000070   0x9003             STR      R0,[SP, #+12]
     45          	struct_reed_switch.GPIO_PinControl = IRQC_DIS;//禁用触发
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x9003             STR      R0,[SP, #+12]
     46          	LPLD_GPIO_Init(struct_reed_switch);
   \   00000076   0xA901             ADD      R1,SP,#+4
   \   00000078   0xB084             SUB      SP,SP,#+16
   \   0000007A   0x4668             MOV      R0,SP
   \   0000007C   0x2214             MOVS     R2,#+20
   \   0000007E   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000082   0xBC0F             POP      {R0-R3}
   \   00000084   0x.... 0x....      BL       LPLD_GPIO_Init
     47          #endif
     48          
     49          #ifdef REED_SWITCH_3
     50          	struct_reed_switch.GPIO_PTx = REED_SWITCH_3_PORT;//干簧管3端口号初始化
   \   00000088   0x....             LDR.N    R0,??DataTable1  ;; 0x400ff100
   \   0000008A   0x9001             STR      R0,[SP, #+4]
     51          	struct_reed_switch.GPIO_Pins = REED_SWITCH_3_PIN;//干簧管3引脚号初始化
   \   0000008C   0xF44F 0x5080      MOV      R0,#+4096
   \   00000090   0x9002             STR      R0,[SP, #+8]
     52          	struct_reed_switch.GPIO_Dir = DIR_INPUT;//干簧管3输入
   \   00000092   0x2000             MOVS     R0,#+0
   \   00000094   0xF88D 0x0010      STRB     R0,[SP, #+16]
     53                  struct_reed_switch.GPIO_PinControl = INPUT_PULL_UP;
   \   00000098   0x2003             MOVS     R0,#+3
   \   0000009A   0x9003             STR      R0,[SP, #+12]
     54          	struct_reed_switch.GPIO_PinControl = IRQC_DIS;//禁用触发
   \   0000009C   0x2000             MOVS     R0,#+0
   \   0000009E   0x9003             STR      R0,[SP, #+12]
     55          	LPLD_GPIO_Init(struct_reed_switch);
   \   000000A0   0xA901             ADD      R1,SP,#+4
   \   000000A2   0xB084             SUB      SP,SP,#+16
   \   000000A4   0x4668             MOV      R0,SP
   \   000000A6   0x2214             MOVS     R2,#+20
   \   000000A8   0x.... 0x....      BL       __aeabi_memcpy4
   \   000000AC   0xBC0F             POP      {R0-R3}
   \   000000AE   0x.... 0x....      BL       LPLD_GPIO_Init
     56          #endif
     57          }
   \   000000B2   0xB007             ADD      SP,SP,#+28
   \   000000B4   0xBD00             POP      {PC}             ;; return

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0H
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
     58          
     59          /*===============================================================
     60          	@brief     获取一个干簧管状态
     61          ==================================================================*/

   \                                 In section .text, align 2, keep-with-next
     62          uint8 Get_Reed_State_Once(uint8 reed_switch_num)
     63          {
   \                     Get_Reed_State_Once: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x0001             MOVS     R1,R0
     64          	uint8 reed_switch_state = 0;//用于接收要读取的干簧管的状态
   \   00000004   0x2000             MOVS     R0,#+0
     65          
     66          	switch(reed_switch_num)
   \   00000006   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xD005             BEQ.N    ??Get_Reed_State_Once_0
   \   0000000C   0x2902             CMP      R1,#+2
   \   0000000E   0xD017             BEQ.N    ??Get_Reed_State_Once_1
   \   00000010   0xD30C             BCC.N    ??Get_Reed_State_Once_2
   \   00000012   0x2903             CMP      R1,#+3
   \   00000014   0xD01E             BEQ.N    ??Get_Reed_State_Once_3
   \   00000016   0xE027             B.N      ??Get_Reed_State_Once_4
     67          	{
     68                      #ifdef REED_SWITCH_0
     69                      case REED_SWITCH_0:
     70                          if(LPLD_GPIO_Input_b(REED_SWITCH_0_PORT, REED_SWITCH_0_NUM) == OUTPUT_H)
   \                     ??Get_Reed_State_Once_0: (+1)
   \   00000018   0x2106             MOVS     R1,#+6
   \   0000001A   0x....             LDR.N    R0,??DataTable1  ;; 0x400ff100
   \   0000001C   0x.... 0x....      BL       LPLD_GPIO_Input_b
   \   00000020   0x2801             CMP      R0,#+1
   \   00000022   0xD101             BNE.N    ??Get_Reed_State_Once_5
     71                          {
     72                              reed_switch_state = 0;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xE000             B.N      ??Get_Reed_State_Once_6
     73                          }
     74                          else 
     75                          {
     76                              reed_switch_state = 1;
   \                     ??Get_Reed_State_Once_5: (+1)
   \   00000028   0x2001             MOVS     R0,#+1
     77                          }
     78                          break;
   \                     ??Get_Reed_State_Once_6: (+1)
   \   0000002A   0xE01D             B.N      ??Get_Reed_State_Once_7
     79                      #endif
     80          
     81                      #ifdef REED_SWITCH_1
     82                      case REED_SWITCH_1:
     83                          if(LPLD_GPIO_Input_b(REED_SWITCH_1_PORT, REED_SWITCH_1_NUM) == OUTPUT_H)
   \                     ??Get_Reed_State_Once_2: (+1)
   \   0000002C   0x2108             MOVS     R1,#+8
   \   0000002E   0x....             LDR.N    R0,??DataTable1  ;; 0x400ff100
   \   00000030   0x.... 0x....      BL       LPLD_GPIO_Input_b
   \   00000034   0x2801             CMP      R0,#+1
   \   00000036   0xD101             BNE.N    ??Get_Reed_State_Once_8
     84                          {
     85                              reed_switch_state = 0;
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xE000             B.N      ??Get_Reed_State_Once_9
     86                          }
     87                          else 
     88                          {
     89                              reed_switch_state = 1;
   \                     ??Get_Reed_State_Once_8: (+1)
   \   0000003C   0x2001             MOVS     R0,#+1
     90                          }
     91                          break;
   \                     ??Get_Reed_State_Once_9: (+1)
   \   0000003E   0xE013             B.N      ??Get_Reed_State_Once_7
     92                      #endif
     93          
     94                      #ifdef REED_SWITCH_2
     95                      case REED_SWITCH_2:
     96                          if(LPLD_GPIO_Input_b(REED_SWITCH_2_PORT, REED_SWITCH_2_NUM) == OUTPUT_H)
   \                     ??Get_Reed_State_Once_1: (+1)
   \   00000040   0x210A             MOVS     R1,#+10
   \   00000042   0x....             LDR.N    R0,??DataTable1  ;; 0x400ff100
   \   00000044   0x.... 0x....      BL       LPLD_GPIO_Input_b
   \   00000048   0x2801             CMP      R0,#+1
   \   0000004A   0xD101             BNE.N    ??Get_Reed_State_Once_10
     97                          {
     98                              reed_switch_state = 0;
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0xE000             B.N      ??Get_Reed_State_Once_11
     99                          }
    100                          else 
    101                          {
    102                              reed_switch_state = 1;
   \                     ??Get_Reed_State_Once_10: (+1)
   \   00000050   0x2001             MOVS     R0,#+1
    103                          }
    104                          break;
   \                     ??Get_Reed_State_Once_11: (+1)
   \   00000052   0xE009             B.N      ??Get_Reed_State_Once_7
    105                      #endif
    106          
    107                      #ifdef REED_SWITCH_3
    108                      case REED_SWITCH_3:
    109                          if(LPLD_GPIO_Input_b(REED_SWITCH_3_PORT, REED_SWITCH_3_NUM) == OUTPUT_H)
   \                     ??Get_Reed_State_Once_3: (+1)
   \   00000054   0x210C             MOVS     R1,#+12
   \   00000056   0x....             LDR.N    R0,??DataTable1  ;; 0x400ff100
   \   00000058   0x.... 0x....      BL       LPLD_GPIO_Input_b
   \   0000005C   0x2801             CMP      R0,#+1
   \   0000005E   0xD101             BNE.N    ??Get_Reed_State_Once_12
    110                          {
    111                              reed_switch_state = 0;
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0xE000             B.N      ??Get_Reed_State_Once_13
    112                          }
    113                          else 
    114                          {
    115                              reed_switch_state = 1;
   \                     ??Get_Reed_State_Once_12: (+1)
   \   00000064   0x2001             MOVS     R0,#+1
    116                          }
    117                          break;
   \                     ??Get_Reed_State_Once_13: (+1)
   \   00000066   0xE7FF             B.N      ??Get_Reed_State_Once_7
    118                      #endif
    119          
    120                      default:
    121                          break;
    122          	}
    123          
    124          	return (reed_switch_state);
   \                     ??Get_Reed_State_Once_4: (+1)
   \                     ??Get_Reed_State_Once_7: (+1)
   \   00000068   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006A   0xBD02             POP      {R1,PC}          ;; return
    125          }
    126          
    127          /*===============================================================
    128          	@brief     获取所有干簧管状态
    129          ==================================================================*/

   \                                 In section .text, align 2, keep-with-next
    130          uint8 Get_All_Reed_State(void)
    131          {
   \                     Get_All_Reed_State: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    132          	uint8 switch_state = 0;//用于记录所有4个干簧管的状态
   \   00000002   0x2400             MOVS     R4,#+0
    133          	uint8 switch_byte = 0;//用于接收一位干簧管的状态
   \   00000004   0x2000             MOVS     R0,#+0
    134          	uint8 switch_num = 0;//用于switch_byte的左移
   \   00000006   0x2500             MOVS     R5,#+0
    135          
    136          	for(switch_num = 0; switch_num < REED_NUM; switch_num++ )
   \   00000008   0x2500             MOVS     R5,#+0
   \   0000000A   0xE006             B.N      ??Get_All_Reed_State_0
    137          	{
    138                      switch_byte = 0;//初始化来准备接收一位干簧管的状态
   \                     ??Get_All_Reed_State_1: (+1)
   \   0000000C   0x2000             MOVS     R0,#+0
    139                      switch_byte = Get_Reed_State_Once(switch_num);//接收一位干簧管的状态
   \   0000000E   0x0028             MOVS     R0,R5
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x.... 0x....      BL       Get_Reed_State_Once
    140                      switch_state += switch_byte; //拨码开关的状态累加
   \   00000016   0x1904             ADDS     R4,R0,R4
    141          	}
   \   00000018   0x1C6D             ADDS     R5,R5,#+1
   \                     ??Get_All_Reed_State_0: (+1)
   \   0000001A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001C   0x2D04             CMP      R5,#+4
   \   0000001E   0xDBF5             BLT.N    ??Get_All_Reed_State_1
    142          
    143          	return (switch_state);
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    144          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x400FF100         DC32     0x400ff100

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   Get_All_Reed_State
        16   -> Get_Reed_State_Once
       8   Get_Reed_State_Once
         8   -> LPLD_GPIO_Input_b
      48   Reed_Init
        32   -> LPLD_GPIO_Init
        32   -> __aeabi_memclr4
        48   -> __aeabi_memcpy4


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
      20  ?_0
      38  Get_All_Reed_State
     108  Get_Reed_State_Once
     182  Reed_Init

 
  20 bytes in section .rodata
 332 bytes in section .text
 
 332 bytes of CODE  memory
  20 bytes of CONST memory

Errors: none
Warnings: none
